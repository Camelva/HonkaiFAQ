import{_ as o,c as s,o as i,b as e,d as a}from"./app.17c68a76.js";const q=JSON.parse('{"title":"Tipos de da\xF1o","description":"","frontmatter":{},"headers":[],"relativePath":"faq/es/47.md","lastUpdated":1670678328000}'),t={name:"faq/es/47.md"},n=e("h1",{id:"tipos-de-dano",tabindex:"-1"},[a("Tipos de da\xF1o "),e("a",{class:"header-anchor",href:"#tipos-de-dano","aria-hidden":"true"},"#")],-1),d=e("p",null,"tags: da\xF1os",-1),l=e("p",null,"Existen 11 categorias de multiplicadores, aunque la mayoria de valkyries no usan todos los tipos al mismo tiempo, e incluso algunos tipos no existen todavia. Los multiplicadores en negritas son multiplicadores \xFAnicos - nunca se diluyen, solo se multiplican, incluso consigo mismos.",-1),c=e("p",null,"1: Da\xF1o f\xEDsico inflingido 2: Da\xF1o fisico recibido 3: Da\xF1o elemental inflingido 4: Da\xF1o f\xEDsico recibido 5: Da\xF1o total (TDM) inflingido 6: Da\xF1o total (TDM) recibido 7: Bonus por tipo (PSY/BIO/MECH) 8: Bonus por clima de Dirac 9: Da\xF1o fisico recibido espec\xEDfico del host (Debuff) 10: Da\xF1o elemental recibido espec\xEDfico del host (Debuff) 11: Da\xF1o total (TDM) recibido espec\xEDfico del host (Debuff)",-1),r=e("p",null,"Los bonus de las mismas categorias se suman entre si. Diferentes categorias se multiplican para el resultado final.",-1),u=e("p",null,"Como un peque\xF1o ejemplo, asumiendo que no hay m\xE1s bonus, con 20% de da\xF1o fisico y otros 20% de da\xF1o fisico (p. ej. stigma t/m dan dichos bonus) el resultado es 40% de da\xF1o fisico total. Si en lugar tienes 20% de da\xF1o fisico y 20% de TDM, obtienes 1.2 * 1.2 = 1.44, 44% de da\xF1o incrementado como resultado final.",-1),p=e("p",null,"Para multiplicadores \xFAnicos, estos se multiplican consigo mismos con el valor indicado siempre. Por ejemplo, Thales M es 2% de da\xF1o de fuego recibido por el host por stack, que puede ser 10 veces stackeable. Este stigma en solitario es 1.02^10 ~ 1.22, en lugar de 1.02*10 = 1.2.",-1),m=[n,d,l,c,r,u,p];function f(_,h,D,b,g,T){return i(),s("div",null,m)}const v=o(t,[["render",f]]);export{q as __pageData,v as default};
